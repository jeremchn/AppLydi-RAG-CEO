#!/usr/bin/env python3
"""
Script pour cr√©er toutes les tables dans la base de donn√©es PostgreSQL
"""
import sys
import os

# Ajouter le r√©pertoire parent au PATH pour les imports
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import Base, engine
from sqlalchemy import text

def create_all_tables():
    """Cr√©e toutes les tables d√©finies dans les mod√®les"""
    try:
        print("Connexion √† la base de donn√©es PostgreSQL...")
        
        # Cr√©er toutes les tables d√©finies dans les mod√®les
        print("Cr√©ation de toutes les tables...")
        Base.metadata.create_all(bind=engine)
        
        # V√©rifier que les tables ont √©t√© cr√©√©es
        with engine.connect() as conn:
            # Lister toutes les tables
            result = conn.execute(text("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name;
            """))
            tables = [row[0] for row in result.fetchall()]
            
            print("Tables cr√©√©es:")
            for table in tables:
                print(f"  ‚úÖ {table}")
            
            # V√©rifier sp√©cifiquement la table agents
            if 'agents' in tables:
                print("\n‚úÖ Table 'agents' cr√©√©e avec succ√®s!")
                
                # V√©rifier la structure de la table agents
                result = conn.execute(text("""
                    SELECT column_name, data_type, is_nullable
                    FROM information_schema.columns 
                    WHERE table_name = 'agents'
                    ORDER BY ordinal_position;
                """))
                
                print("Structure de la table 'agents':")
                for row in result.fetchall():
                    print(f"  - {row[0]}: {row[1]} ({'NULL' if row[2] == 'YES' else 'NOT NULL'})")
            else:
                print("‚ùå Erreur: Table 'agents' non cr√©√©e")
                return False
            
            return True
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des tables: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = create_all_tables()
    if success:
        print("\nüéâ Initialisation de la base de donn√©es termin√©e avec succ√®s!")
    else:
        print("\nüí• √âchec de l'initialisation de la base de donn√©es")
        sys.exit(1)
