steps:
  # Build Backend
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/applydi/applydi-backend', './backend']
    
  # Push Backend
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/applydi/applydi-backend']
    
  # Deploy Backend
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'applydi-backend'
      - '--image'
      - 'gcr.io/applydi/applydi-backend'
      - '--platform'
      - 'managed'
      - '--region'
      - 'europe-west1'
      - '--allow-unauthenticated'
      - '--port'
      - '8080'
      - '--memory'
      - '1Gi'
      - '--cpu'
      - '1'
      - '--min-instances'
      - '0'
      - '--max-instances'
      - '10'
      - '--timeout'
      - '900'
      - '--set-env-vars'
      - 'GOOGLE_CLOUD_PROJECT=applydi,ENVIRONMENT=production,DATABASE_URL=postgresql://applydiuser:applydipass@34.78.169.143/applydidb,ALLOWED_ORIGINS=https://applydi-frontend-6hliasi23q-ew.a.run.app'
      - '--set-secrets'
      - 'OPENAI_API_KEY=OPENAI_API_KEY:latest,JWT_SECRET_KEY=JWT_SECRET_KEY:latest'
      
  # Get Backend URL
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - '-c'
      - |
        BACKEND_URL=$$(gcloud run services describe applydi-backend --region=europe-west1 --format="value(status.url)")
        echo "Backend URL: $$BACKEND_URL"
        echo "$$BACKEND_URL" > /workspace/backend_url.txt
        
  # Build Frontend with correct API URL
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: bash
    args:
      - '-c'
      - |
        BACKEND_URL=$$(cat /workspace/backend_url.txt)
        cd frontend
        # Create a temporary Dockerfile with build arg
        cat > Dockerfile.temp << EOF
        FROM node:18-alpine AS deps
        RUN apk add --no-cache libc6-compat
        WORKDIR /app
        COPY package.json package-lock.json ./
        RUN npm ci --only=production

        FROM node:18-alpine AS builder
        WORKDIR /app
        COPY . .
        COPY --from=deps /app/node_modules ./node_modules
        ARG NEXT_PUBLIC_API_URL
        ENV NEXT_PUBLIC_API_URL=\$$NEXT_PUBLIC_API_URL
        RUN npm run build

        FROM node:18-alpine AS runner
        WORKDIR /app
        ENV NODE_ENV production
        RUN addgroup --system --gid 1001 nodejs
        RUN adduser --system --uid 1001 nextjs
        COPY --from=builder /app/public ./public
        COPY --from=builder --chown=nextjs:nodejs /app/.next ./.next
        COPY --from=builder /app/node_modules ./node_modules
        COPY --from=builder /app/package.json ./package.json
        USER nextjs
        EXPOSE 3000
        ENV PORT 3000
        CMD ["npm", "start"]
        EOF
        
        docker build --build-arg NEXT_PUBLIC_API_URL=$$BACKEND_URL -t gcr.io/applydi/applydi-frontend -f Dockerfile.temp .
        
  # Push Frontend
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/applydi/applydi-frontend']
        
  # Deploy Frontend
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'applydi-frontend'
      - '--image'
      - 'gcr.io/applydi/applydi-frontend'
      - '--platform'
      - 'managed'
      - '--region'
      - 'europe-west1'
      - '--allow-unauthenticated'
      - '--port'
      - '3000'
      - '--memory'
      - '512Mi'
      - '--cpu'
      - '1'
      - '--min-instances'
      - '0'
      - '--max-instances'
      - '5'

images:
  - 'gcr.io/applydi/applydi-backend'
  - 'gcr.io/applydi/applydi-frontend'

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'

timeout: 1800s
